name: Nightly Test Suite

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  # Extended E2E Tests
  extended-e2e:
    name: Extended E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        viewport: [desktop, tablet, mobile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run extended E2E tests
        run: npx playwright test --project=${{ matrix.browser }} --grep="@extended"
        env:
          VIEWPORT: ${{ matrix.viewport }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nightly-e2e-${{ matrix.browser }}-${{ matrix.viewport }}
          path: playwright-report/
          retention-days: 30

  # Load Testing
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and start application
        run: |
          npm run build
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Install Artillery
        run: npm install -g artillery@latest

      - name: Run load tests
        run: artillery run tests/load/load-test.yml

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: load-test-report.json
          retention-days: 30

  # Security Penetration Testing
  penetration-testing:
    name: Security Penetration Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and start application
        run: |
          npm run build
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: report_html.html
          retention-days: 30

  # Performance Regression Testing
  performance-regression:
    name: Performance Regression Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run performance tests
        run: |
          npx lighthouse http://localhost:3000 --output=json --output-path=lighthouse-report.json
          npx lighthouse http://localhost:3000/tickets --output=json --output-path=lighthouse-tickets.json
          npx lighthouse http://localhost:3000/test-cases --output=json --output-path=lighthouse-test-cases.json

      - name: Compare performance metrics
        run: |
          node scripts/compare-performance.js lighthouse-report.json
          node scripts/compare-performance.js lighthouse-tickets.json
          node scripts/compare-performance.js lighthouse-test-cases.json

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-regression-results
          path: lighthouse-*.json
          retention-days: 30

  # Notify Results
  notify-nightly:
    name: Notify Nightly Results
    runs-on: ubuntu-latest
    needs: [extended-e2e, load-testing, penetration-testing, performance-regression]
    if: always()
    steps:
      - name: Notify team of nightly test results
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#qtrack-nightly-tests'
          text: |
            ðŸŒ™ Nightly test suite completed
            Extended E2E: ${{ needs.extended-e2e.result }}
            Load Testing: ${{ needs.load-testing.result }}
            Security Testing: ${{ needs.penetration-testing.result }}
            Performance: ${{ needs.performance-regression.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
